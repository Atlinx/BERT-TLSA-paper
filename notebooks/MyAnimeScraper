import time
import requests 
import pandas as pd
review_list = []     # Do not touch 

anime_watched = []
from concurrent.futures import ThreadPoolExecutor, as_completed




# creating anime list
anime_list= ["Shingeki no Kyojin","Spirited away","Naruto","Jiujitsu Kaisen","Death Note", "One Piece", "My Hero Academia", "One Punch Man", \
            "Code Geass", "Oshi no Ko","Fullmetal Alchemist: Brotherhood", "Steins;Gate", "Your Lie in April", "Cowboy Bebop",
    "Hunter x Hunter", "Assassination Classroom", "Gintama", "Haikyuu!!", "Gurren Lagann",
    "JoJo's Bizarre Adventure", "Re:Zero – Starting Life in Another World", "Yuri!!! on Ice",
    "Neon Genesis Evangelion", "Puella Magi Madoka Magica", "Sword Art Online", "Angel Beats!",
    "Black Butler", "KonoSuba: God's Blessing on This Wonderful World!", "Clannad: After Story",
    "Noragami", "Dragon Ball Z", "Mob Psycho 100", "Toradora!", "Soul Eater", "Fate/Zero",
    "Ouran High School Host Club", "Bleach", "Demon Slayer: Kimetsu no Yaiba", "The Seven Deadly Sins",
    "Erased", "The Promised Neverland", "Violet Evergarden", "Akame ga Kill!", "Parasyte: The Maxim",
    "Blue Exorcist", "Psycho-Pass", "Black Clover", "Hellsing Ultimate", "Berserk", "Elfen Lied",
    "The Rising of the Shield Hero", "Dr. Stone", "Fire Force", "The Devil Is a Part-Timer!",
    "Is It Wrong to Try to Pick Up Girls in a Dungeon?", "The Quintessential Quintuplets",
    "Rent-A-Girlfriend", "Horimiya", "Kaguya-sama: Love is War", "The World God Only Knows",
    "Bakuman.", "Great Teacher Onizuka", "Monster", "Paranoia Agent", "Serial Experiments Lain",
    "Texhnolyze", "Ergo Proxy", "Baccano!", "Durarara!!", "Hyouka", "The Melancholy of Haruhi Suzumiya",
    "Lucky☆Star", "Nichijou", "Azumanga Daioh", "K-On!", "March Comes in Like a Lion", "Barakamon",
    "Silver Spoon", "Anohana: The Flower We Saw That Day", "Your Name.", "Weathering with You",
    "5 Centimeters per Second", "The Garden of Words", "A Place Further than the Universe",
    "Made in Abyss", "Land of the Lustrous", "The Ancient Magus' Bride", "The Tale of the Princess Kaguya",
    "Princess Mononoke", "Howl's Moving Castle", "My Neighbor Totoro", "Kiki's Delivery Service",
    "Nausicaä of the Valley of the Wind", "Castle in the Sky", "Porco Rosso", "Whisper of the Heart",
    "The Wind Rises", "When Marnie Was There", "Tokyo Ghoul", "Terror in Resonance",
    "Arakawa Under the Bridge", "Nana", "Zankyou no Terror", "Orange","Odd Taxi"

] # LArge Anime List

def fetch_animes():
    
    for anime in anime_list:
        print(f"Searching for anime: {anime}")
        url = f"https://api.jikan.moe/v4/anime?q={anime}&limit=1"
        response = requests.get(url)
        data = response.json() #Creates the Json 
        anime_id = data['data'][0]['mal_id'] 
        for page in range(1,6):
            reviews_url = f"https://api.jikan.moe/v4/anime/{anime_id}/reviews?page={page}"
            review_response = requests.get(reviews_url)
            if review_response.status_code != 200:
                break  # Stop if the request fails
    # Enters the review portion of the code

            reviews_data = review_response.json()['data']
            
            for review in reviews_data:
                review_entry = {
                'site': "MyAnimeList",
                'user': review['user']['username'] ,    
                'review_target': anime,    
                'review': review['review'],
                'score': review['score'],  
                'max_score': 10   
                  
                
            }
                review_list.append(review_entry)   
            if anime not in anime_watched:
                anime_watched.append(anime)
           
            
    

        time.sleep(2) #TOO many requests error


all_reviews = []
fetch_animes()
with ThreadPoolExecutor(max_workers=5) as executor:
    future_to_anime = {executor.submit(fetch_animes): anime for anime in anime_list}
    for future in as_completed(future_to_anime):
        anime = future_to_anime[future]
        try:
            anime_reviews = future.result()
            if anime_reviews:
                review_list.extend(anime_reviews)
                anime_watched.append(anime)
        except Exception as e:
            print("")






df = pd.DataFrame(review_list)





print(df.head(380))
print("\n Number of reviews is ", len(review_list))
print("\n Number of Animes used",len(anime_watched))

